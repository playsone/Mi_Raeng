import { Component, inject } from '@angular/core';
import { Router } from '@angular/router';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ApiService } from '../../services/api';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    MatIconModule,
    CommonModule,
    FormsModule
  ],
  templateUrl: './login.html',
  styleUrls: ['./login.scss']
})
export class Login {

  // --- Inject Services ---
  private router = inject(Router);
  private apiService = inject(ApiService);
  
  // --- Form Data ---
  phoneNumber: string = '';
  
  // --- UI State ---
  errorMessage: string = '';
  isLoading: boolean = false; 
  
  // üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô home.ts)
  private readonly DAYS_LAPSED_KEY = 'daysLapsed'; 

  goBack(): void {
    history.back();
  }
  
  // --- Main Login Function ---
  login() {
    if (!this.phoneNumber) {
      this.errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
      return;
    }
    
    this.isLoading = true; 
    this.errorMessage = ''; 

    const credentials = {
      phone: this.phoneNumber,
    };
    
    this.apiService.login(credentials).subscribe({
      next: (response) => {
        this.isLoading = false; 
        console.log('Login successful!', response);
        
        localStorage.setItem('authToken', response.token);
        localStorage.setItem('userRole', response.role);
        
        // üî• ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å days_since_last_login ‡∏•‡∏á‡πÉ‡∏ô localStorage
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Home Component ‡∏î‡∏∂‡∏á‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Popup ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        if (response.days_since_last_login !== undefined && response.days_since_last_login !== null) {
             localStorage.setItem(this.DAYS_LAPSED_KEY, response.days_since_last_login.toString());
        }

        if (response.role === 'admin') {
          this.router.navigate(['/admin']);
        } else {
          this.router.navigate(['/home']);
        }
      },
      error: (err) => {
        this.isLoading = false; 
        console.error('Login failed', err);

        if (err.error && err.error.error) {
          this.errorMessage = err.error.error;
        } else {
          this.errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
        }
      }
    });
  }
}