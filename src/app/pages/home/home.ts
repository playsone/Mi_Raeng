import { Component, OnInit, inject } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon'; 
import { ApiService } from '../../services/api';
import { UserProfile } from '../../model/api.model';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, MatIconModule], 
  templateUrl: './home.html',
  styleUrls: ['./home.scss']
})
export class Home implements OnInit {
  
  private router = inject(Router);
  private apiService = inject(ApiService);
  
  userProfile: UserProfile | null = null;
  showWelcomePopup: boolean = false; 
  
  treeCount: number = 0;
  remainingScore: number = 0;
  private readonly SCORE_PER_TREE = 60; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î 60 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ 1 ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  
  // üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ sessionStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
  private readonly WELCOME_POPUP_SEEN_KEY = 'welcomePopupSeen'; 

  ngOnInit(): void {
    this.apiService.getMyProfile().subscribe({
      next: (data) => {
        this.userProfile = data;
        console.log('Profile data loaded:', data);
        this.calculateAndShowPopup();
      },
      error: (err) => {
        console.error('Failed to load profile, logging out.', err);
        this.logout(); 
      }
    });
  }

  // ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Popup (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sessionStorage)
  calculateAndShowPopup(): void {
    if (this.userProfile) {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏¥‡∏î Popup ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // ‡πÉ‡∏ä‡πâ sessionStorage.getItem ‡πÅ‡∏ó‡∏ô localStorage.getItem
      const popupSeen = sessionStorage.getItem(this.WELCOME_POPUP_SEEN_KEY);
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô null)
      if (!popupSeen) { 
        const totalScore = this.userProfile.score;
        this.treeCount = Math.floor(totalScore / this.SCORE_PER_TREE);
        this.remainingScore = this.SCORE_PER_TREE - (totalScore % this.SCORE_PER_TREE);
        this.showWelcomePopup = true; // ‡πÄ‡∏õ‡∏¥‡∏î Popup
      }
    }
  }

  goToExerciseFromPopup(): void {
    this.closePopup(); 
    this.goTo('/exercise'); 
  }

  // ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î Popup ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏õ‡πÑ‡∏´‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏á sessionStorage)
  closePopup(): void {
    this.showWelcomePopup = false;
    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏á sessionStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏¥‡∏î
    // ‡πÉ‡∏ä‡πâ sessionStorage.setItem ‡πÅ‡∏ó‡∏ô localStorage.setItem
    sessionStorage.setItem(this.WELCOME_POPUP_SEEN_KEY, 'true');
  }
  
  get profilePictureUrl(): string {
    if (this.userProfile?.gender?.toLowerCase() === 'female') {
      return 'assets/images/profilefm.png'; 
    }
    return 'assets/images/profilem.png'; 
  }

  goTo(route: string): void {
    this.router.navigate([route]);
  }

  logout(): void {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ logout ‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sessionStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Popup ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    sessionStorage.removeItem(this.WELCOME_POPUP_SEEN_KEY);
    localStorage.removeItem('authToken');
    this.router.navigate(['/login']); 
  }
}